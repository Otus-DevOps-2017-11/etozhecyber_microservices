version: '3.3'
services:
  post_db:
    image: mongo:3.2
    deploy:
      placement:
        constraints:
          - node.labels.reliability == high
    volumes:
      - post_db:${DB_PATH}
    networks:
      back_net:
        aliases:
          - comment_db
  ui:
    image: ${REGISTRY_USERNAME}/ui:${UI_VERSION}
    deploy:
      replicas: 3
      restart_policy: 
        condition: on-failure 
        max_attempts: 3
        delay: 3s
      resources:
        limits:
          cpus: '0.50'
          memory: 150M
      update_config:
        delay: 5s
        parallelism: 1
        failure_action: rollback
      mode: replicated
      placement:
        constraints:
          - node.role == worker
    environment:
      - ENV=DEV
    ports:
      - ${UI_PORT}:9292/tcp
    networks:
      - front_net
#    logging:
#      driver: "fluentd"
#      options:
#        fluentd-address: localhost:24224
#        tag: service.ui

  post:
    image: ${REGISTRY_USERNAME}/post:${POST_VERSION}
    deploy:
      mode: replicated
      replicas: 3
      restart_policy: 
        condition: on-failure 
        max_attempts: 10
        delay: 1s
      resources:
        limits:
          cpus: '0.30'
          memory: 300M
      update_config:
        delay: 10s
        parallelism: 2
        failure_action: rollback
      placement:
        constraints:
          - node.role == worker
    networks:
      - back_net
      - front_net
    ports:
      - "5000:5000"
    depends_on:
      - post_db
#    logging:
#      driver: "fluentd"
#      options:
#        fluentd-address: localhost:24224
#        tag: service.post

  comment:
    image: ${REGISTRY_USERNAME}/comment:${COMMENT_VERSION}
    deploy:
      mode: replicated
      replicas: 3
      restart_policy: 
        condition: on-failure 
        max_attempts: 10
        delay: 1s
      resources:
        limits:
          cpus: '0.30'
          memory: 300M
      update_config:
        delay: 10s
        parallelism: 2
        failure_action: rollback
      placement:
        constraints:
          - node.role == worker
    networks:
      - back_net
      - front_net

volumes:
  post_db:

networks:
  front_net:
  back_net: